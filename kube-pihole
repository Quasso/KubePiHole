#!/bin/bash

# A simple but powerful CLI tool to automate k8s deployment of Pi-hole on a Pi (or elsewhere potentially)

ARGS=$*

export PRINT_PREFIX="Kube Pi Hole"
export KUBE_DESKTOP=true
export KUBE_NS="pihole"
export PIHOLE_TIMEZONE="Europe/London"
export PIHOLE_WEB_PASSWORD="changemetosomethingsecure" # TODO: add automatic secure password generation + output
export STORAGE_CLASS_NAME="local-storage"

# Contains a few helpful methods because I like DRY things
source scripts/colours.sh
source scripts/utils.sh

no_args() {
    print_assistant "Error! You must supply at least one argument."
}

function init_deploy() {
    source scripts/deploy.sh

    print_assistant "Deploying the k8s manifests now with automatic env substition..."

    if [[ -z $KUBE_DESKTOP ]]; then
        # This ensures relative paths work and we execute from the root of the repo
        cd "$HOME/KubePiHole"
        print_assistant "Creating namespace for k8s deploys via k3s (on a Pi)..."
        sudo k3s kubectl create ns $KUBE_NS
    elif [[ $KUBE_DESKTOP == true ]]; then
        print_assistant "Setting the context for kubectl to use docker-desktop as a safety measure (ensures you don't deploy remotely by accident)..."
        kubectl set-context docker-desktop
        print_assistant "Creating namespace for k8s deploys via kube-ctl (on a Desktop)..."
        kubectl create ns $KUBE_NS
    fi

    # Deploy all the PVs and the Pi-hole instance
    deploy_pihole
}

#
# Process the args supplied via CLI
#
if [[ $ARGS == 0 ]]; then
    no_args
else
    # At least one arg supplied, process what it is!
    COMMAND=${ARGS}

    print_assistant "Kube Pi Hole is running!" "title" "Command was supplied: $COMMAND"

    if [[ $COMMAND == "install-dependencies" || $COMMAND == "install" ]]; then
        source scripts/install-required-packages.sh

        print_assistant "Installing dependencies via helper, it will output useful info..."
        install_dependencies
    elif [[ $COMMAND == "deploy" ]]; then
        init_deploy
    elif [[ $COMMAND == "redeploy" ]]; then
        print_assistant "Deleting all the resources on the namespace \$KUBE_NS ($KUBE_NS)..."
        kubectl delete storageclass $STORAGE_CLASS_NAME
        kubectl delete ns $KUBE_NS
        init_deploy
    fi

    space_terminal_lg
fi
